"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const apollo_server_core_1 = require("apollo-server-core");
const graphql_tools_1 = require("graphql-tools");
const fs_1 = require("fs");
const graphql_1 = require("graphql");
const lodash_1 = require("lodash");
const graphql_ast_explorer_1 = require("./graphql-ast.explorer");
const graphql_schema_builder_1 = require("./graphql-schema-builder");
const services_1 = require("./services");
const utils_1 = require("./utils");
let GraphQLFactory = class GraphQLFactory {
    constructor(resolversExplorerService, delegatesExplorerService, scalarsExplorerService, graphqlAstExplorer, gqlSchemaBuilder) {
        this.resolversExplorerService = resolversExplorerService;
        this.delegatesExplorerService = delegatesExplorerService;
        this.scalarsExplorerService = scalarsExplorerService;
        this.graphqlAstExplorer = graphqlAstExplorer;
        this.gqlSchemaBuilder = gqlSchemaBuilder;
    }
    mergeOptions(options = { typeDefs: [] }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resolvers = this.resolversExplorerService.explore();
            const typesResolvers = utils_1.extend(this.scalarsExplorerService.explore(), resolvers);
            const transformSchema = (schema) => tslib_1.__awaiter(this, void 0, void 0, function* () { return options.transformSchema ? yield options.transformSchema(schema) : schema; });
            if (options.autoSchemaFile) {
                const autoGeneratedSchema = yield this.gqlSchemaBuilder.build(options.autoSchemaFile, options.buildSchemaOptions, this.resolversExplorerService.getAllCtors());
                const executableSchema = graphql_tools_1.makeExecutableSchema({
                    resolvers: utils_1.extend(typesResolvers, options.resolvers),
                    typeDefs: apollo_server_core_1.gql `
          ${graphql_1.printSchema(autoGeneratedSchema)}
        `,
                    resolverValidationOptions: Object.assign(Object.assign({}, (options.resolverValidationOptions || {})), { requireResolversForResolveType: false }),
                });
                let schema = options.schema
                    ? graphql_tools_1.mergeSchemas({
                        schemas: [options.schema, executableSchema],
                    })
                    : executableSchema;
                const autoGeneratedSchemaConfig = autoGeneratedSchema.toConfig();
                const schemaConfig = this.overrideOrExtendResolvers(schema.toConfig(), autoGeneratedSchemaConfig);
                schema = new graphql_1.GraphQLSchema(schemaConfig);
                return Object.assign(Object.assign({}, options), { typeDefs: undefined, schema: yield transformSchema(schema) });
            }
            if (lodash_1.isEmpty(options.typeDefs)) {
                return Object.assign(Object.assign({}, options), { typeDefs: undefined, schema: yield transformSchema(options.schema) });
            }
            const executableSchema = graphql_tools_1.makeExecutableSchema({
                resolvers: utils_1.extend(typesResolvers, options.resolvers),
                directiveResolvers: options.directiveResolvers,
                schemaDirectives: options.schemaDirectives,
                typeDefs: apollo_server_core_1.gql `
        ${options.typeDefs}
      `,
                resolverValidationOptions: options.resolverValidationOptions,
            });
            const schema = options.schema
                ? graphql_tools_1.mergeSchemas({
                    schemas: [options.schema, executableSchema],
                })
                : executableSchema;
            utils_1.removeTempField(schema);
            return Object.assign(Object.assign({}, options), { typeDefs: undefined, schema: yield transformSchema(schema) });
        });
    }
    overrideOrExtendResolvers(executableSchemaConfig, autoGeneratedSchemaConfig) {
        const schemaConfig = autoGeneratedSchemaConfig;
        const rootResolverKeys = [
            'mutation',
            'query',
            'subscription',
        ];
        rootResolverKeys
            .filter(key => executableSchemaConfig[key] && schemaConfig[key])
            .forEach(key => {
            const executableSchemaFields = executableSchemaConfig[key].getFields();
            const schemaFields = schemaConfig[key].getFields();
            lodash_1.forEach(executableSchemaFields, (value, resolverName) => {
                if (schemaFields[resolverName]) {
                    schemaFields[resolverName].resolve =
                        executableSchemaFields[resolverName].resolve;
                    if (schemaFields[resolverName].subscribe) {
                        schemaFields[resolverName].subscribe =
                            executableSchemaFields[resolverName].subscribe;
                    }
                }
                else {
                    schemaFields[resolverName] = executableSchemaFields[resolverName];
                }
            });
        });
        const getAutoGeneratedTypeByName = (name) => schemaConfig.types.find(type => type.name === name);
        executableSchemaConfig.types
            .filter(type => type instanceof graphql_1.GraphQLObjectType)
            .forEach((type) => {
            const fields = type.getFields();
            lodash_1.forEach(fields, (value, key) => {
                if (!value.resolve) {
                    return;
                }
                const autoGeneratedType = getAutoGeneratedTypeByName(type.name);
                if (!autoGeneratedType) {
                    return;
                }
                const field = autoGeneratedType.getFields()[key];
                field && (field.resolve = value.resolve);
            });
        });
        return schemaConfig;
    }
    createDelegates() {
        return this.delegatesExplorerService.explore();
    }
    generateDefinitions(typeDefs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (lodash_1.isEmpty(typeDefs) || !options.definitions) {
                return;
            }
            const tsFile = yield this.graphqlAstExplorer.explore(apollo_server_core_1.gql `
        ${typeDefs}
      `, options.definitions.path, options.definitions.outputAs);
            if (!fs_1.existsSync(options.definitions.path) ||
                !fs_1.lstatSync(options.definitions.path).isFile() ||
                fs_1.readFileSync(options.definitions.path, 'utf8') !== tsFile.getFullText()) {
                yield tsFile.save();
            }
        });
    }
};
GraphQLFactory = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [services_1.ResolversExplorerService,
        services_1.DelegatesExplorerService,
        services_1.ScalarsExplorerService,
        graphql_ast_explorer_1.GraphQLAstExplorer,
        graphql_schema_builder_1.GraphQLSchemaBuilder])
], GraphQLFactory);
exports.GraphQLFactory = GraphQLFactory;
